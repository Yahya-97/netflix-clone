{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchOriginalsNetflix","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.57635016.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL : \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://images.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title , fetchUrl , isLargeRow}) {\r\n    const [movies,setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    useEffect(() =>{\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request; \r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n    const opts = {\r\n        height : \"390\",\r\n        width : \"100%\",\r\n        playerVars : {\r\n\r\n            autoplay : 1,\r\n        },\r\n    };\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        }else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url)=> {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n               setTrailerUrl(urlParams.get(\"v\"));\r\n            })\r\n            .catch((error)=> console.log(error));\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row__title\">{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie => (\r\n                    <img \r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    key={movie.id} \r\n                    onClick={() => handleClick(movie)}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                    alt={movie.name} />\r\n                ))} \r\n            </div>\r\n           {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"effeb0ea54cbbf86120f402b715166a2\";\r\n\r\nconst requests = {\r\n    fetchOriginalsNetflix : `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTrending : `/trending/movie/week?api_key=${API_KEY}`,\r\n    fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`,\r\n    fetchActionMovies : `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies : `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies : `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies : `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries : `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\nexport default requests;","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n    const [movie , setMovie] = useState([]);\r\n    useEffect(() => {\r\n            async function fetchData() {\r\n                const request = await axios.get(requests.fetchOriginalsNetflix);\r\n                setMovie (\r\n                    request.data.results[\r\n                        Math.floor(Math.random() * request.data.results.length - 1)\r\n                    ]\r\n                ) \r\n                return request;\r\n            }\r\n            fetchData();\r\n    },[])\r\n    console.log(movie);\r\n\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;  \r\n    }\r\n\r\n    return (\r\n        <header className= \"banner\" \r\n            style={{\r\n                backgroundSize:\"cover\",\r\n                backgroundImage:`url(\r\n                    \"https://images.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition:\"center center\"\r\n            }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\" >{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\"> {truncate(movie?.overview , 150)} </h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Nav.css\";\r\nfunction Nav() {\r\n        const [show , handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className= {`nav ${show && \"nav__black\"}`}>\r\n        <img className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n        alt=\"Netflix Logo\" />\r\n            <img className=\"nav__avatar\" \r\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n            alt=\"Netflix Logo\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests'\nimport Banner from './Banner';\nimport Nav from './Nav';\nfunction App() {\n  return (\n   <div className=\"App\">\n        <Nav />\n        <Banner />\n        <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchOriginalsNetflix} isLargeRow={true} />\n        <Row title=\"TRENDING\" fetchUrl={requests.fetchTrending} />\n        <Row title=\"TOP RATED\" fetchUrl={requests.fetchTopRated} />\n        <Row title=\"ACTION MOVIES\" fetchUrl={requests.fetchActionMovies} />\n        <Row title=\"COMEDY MOVIES\" fetchUrl={requests.fetchComedyMovies} />\n        <Row title=\"HORROR MOVIES\" fetchUrl={requests.fetchHorrorMovies} />\n        <Row title=\"ROMANCE MOVIES\" fetchUrl={requests.fetchRomanceMovies} />\n        <Row title=\"DOCUMENTARIES\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}